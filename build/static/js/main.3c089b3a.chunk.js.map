{"version":3,"sources":["actions/listsActions.js","actions/cardsActions.js","actions/index.js","reducers/listsReducer.js","reducers/index.js","store/index.js","components/ScrumCard.js","components/ScrumActionButton.js","components/ScrumList.js","components/App.js","index.js"],"names":["addList","title","type","CONSTANTS","ADD_LIST","payload","sort","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","DRAG_HAPPENED","addCard","listID","text","ADD_CARD","cardID","initialState","id","cards","listsReducer","state","action","newList","newCard","newState","map","list","splice","console","log","find","card","listStart","listEnd","combineReducers","lists","store","createStore","rootReducer","CardContainer","styled","div","ScrumCard","index","String","provided","ref","innerRef","draggableProps","dragHandleProps","Card","CardContent","Typography","gutterBottom","ScrumActionButton","formOpen","openForm","setState","closeForm","handleInputChange","e","target","value","handleAddList","dispatch","props","handleAddCard","renderAddButton","buttonText","buttonTextOpacity","buttonTextColor","buttonTextBackground","onClick","style","styles","openFormButtonGroup","opacity","color","backgroundColor","Icon","renderForm","placeholder","buttonTitle","overflow","minHeight","minWidth","padding","autoFocus","onBlur","onChange","resize","width","outline","border","formButtonGroup","Button","onMouseDown","variant","marginLeft","cursor","this","React","Component","display","alignItems","borderRadius","height","paddingLeft","marginTop","connect","ListContainer","ScrumList","droppableId","droppableProps","App","onDragEnd","result","destination","source","className","direction","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3c089b3a.chunk.js","sourcesContent":["import { CONSTANTS } from \"../actions\";\n\nexport const addList = title => {\n    return {\n        type: CONSTANTS.ADD_LIST,\n        payload: title\n    };\n};\n\n export const sort = (\n     droppableIdStart,\n     droppableIdEnd,\n     droppableIndexStart,\n     droppableIndexEnd,\n     draggableId,\n     type\n ) => {\n     return {\n         type: CONSTANTS.DRAG_HAPPENED,\n         payload: {\n            droppableIdStart,\n            droppableIdEnd,\n            droppableIndexStart,\n            droppableIndexEnd,\n            draggableId,\n            type\n         }\n     }\n }","import { CONSTANTS } from \"../actions\";\n\nexport const addCard = (listID, text) => {\n    return {\n        type: CONSTANTS.ADD_CARD,\n        payload: {text, listID }\n    };\n};","export * from \"./listsActions\";\nexport * from \"./cardsActions\";\n\nexport const CONSTANTS = {\n    ADD_CARD:\"ADD_CARD\",\n    ADD_LIST:\"ADD_LIST\",\n    DRAG_HAPPENED: \"DRAG_HAPPENED\"\n};\n\n","import { CONSTANTS } from \"../actions\";\n\nlet listID = 2;\nlet cardID = 6;\n\nconst initialState = [\n    {\n        title: \"BACKLOG\",\n        id: `list-${0}`,\n        cards: [\n            {\n                id: `card-${0}`,\n                text: \"Create User Stories\"\n            },\n            {\n                id: `card-${1}`,\n                text: \"j'ai pas d'idées de texte, c'est super\"\n            }\n        ]\n    },\n    {\n        title: \"PLANNING\",\n        id: `list-${1}`,\n        cards: [\n            {\n                id:`card-${2}`,\n                text: \"TO-DO tasks\"\n            },\n            {\n                id: `card-${3}`,\n                text: \"j'ai toujours pas d'idées de tâches, c'est dingue\"\n            },\n            {\n                id: `card-${4}`,\n                text: \"ça devient difficile d'avoir des idées qui viennent de nulle part, mon cerveau bouille\"\n            },\n            {\n                id: `card-${5}`,\n                text: \"need to debug rn arghhh ... wouhou I did it \"\n            }\n        ]\n    }\n\n];\n\nconst listsReducer = (state = initialState, action) => {\n    switch (action.type) {\n\n        case CONSTANTS.ADD_LIST:\n            const newList = {\n                title: action.payload,\n                cards: [],\n                id: `list-${listID}`\n            };\n            listID += 1;\n            return [...state, newList];\n        \n        case CONSTANTS.ADD_CARD: {\n            const newCard = {\n                text: action.payload.text,\n                id: `card-${cardID}`\n            };\n            cardID += 1;\n\n            const newState = state.map(list => {\n                if (list.id === action.payload.listID) {\n                    return {\n                        ...list,\n                        cards: [...list.cards, newCard]\n                    }\n                } else {\n                    return list;\n                }\n            });\n\n            return newState;\n        }\n\n        case CONSTANTS.DRAG_HAPPENED:\n\n            const {\n                droppableIdStart,\n                droppableIdEnd,\n                droppableIndexStart,\n                droppableIndexEnd,\n                // draggableId\n                type\n            } = action.payload;\n            const newState = [...state];\n\n            //dragging lists around\n            if(type === \"list\") {\n                const list = newState.splice(droppableIndexStart, 1);\n                newState.splice(droppableIndexEnd, 0, ...list);\n                return newState;\n            }\n\n            //in the same list\n            if(droppableIdStart === droppableIdEnd) {\n                console.log(\"same list\")\n                const list = state.find(list => droppableIdStart === list.id);\n                const card = list.cards.splice(droppableIndexStart, 1);\n                list.cards.splice(droppableIndexEnd, 0, ...card);\n            }\n            \n            // other list\n\n            if(droppableIdStart !== droppableIdEnd) {\n                // find the list where drag happened\n                const listStart = state.find(list => droppableIdStart === list.id);\n\n                //pull out the card from the list\n                const card = listStart.cards.splice(droppableIndexStart, 1);\n\n                // find the list where drag ended\n                const listEnd = state.find(list => droppableIdEnd === list.id);\n\n                //put the card in the new list \n                listEnd.cards.splice(droppableIndexEnd, 0, ...card)\n            }\n\n            return newState;\n\n        default: \n            return state;\n    }\n};\n\nexport default listsReducer;","import {combineReducers} from 'redux';\nimport listsReducer from \"./listsReducer\"\n\nexport default combineReducers({\n    lists: listsReducer\n});\n","import {createStore} from \"redux\";\nimport rootReducer from \"../reducers\";\n\nconst store = createStore(rootReducer);\n\nexport default store;","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\nimport {Draggable} from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\n\nconst CardContainer = styled.div `\n    margin-bottom: 8px;\n`;\n\nconst ScrumCard = ({ text, id, index }) => {\n    return (\n      <Draggable draggableId={String(id)} index={index}>\n          {provided => (\n              <CardContainer \n                ref={provided.innerRef} \n                {...provided.draggableProps} \n                {...provided.dragHandleProps}\n              >\n                <Card>\n                    <CardContent>\n                        <Typography gutterBottom>{text}</Typography>\n                    </CardContent>\n                </Card>\n            </CardContainer>\n          )}\n      </Draggable>\n    );\n};\n\nexport default ScrumCard;","import React from \"react\";\nimport Icon from \"@material-ui/core/icon\";\nimport TextareaAutosize from 'react-textarea-autosize';\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\nimport { connect } from \"react-redux\";\nimport { addList, addCard } from \"../actions\";\n\nclass ScrumActionButton extends React.Component {\n\n    state = {\n        formOpen: false,\n        text:\"\"\n    };\n\n    openForm = () => {\n        this.setState({\n            formOpen: true\n        });\n    };\n\n    closeForm = () => {\n        this.setState({\n            formOpen: false\n        });\n    };\n\n    handleInputChange = e => {\n        this.setState({\n            text: e.target.value\n        });\n    };\n\n    handleAddList = () => {\n        const { dispatch } = this.props;\n        const { text } = this.state;\n\n        if (text) {\n            this.setState({\n                text:\"\"\n            });\n            dispatch(addList(text));\n        }\n\n        return;\n    };\n\n    handleAddCard = () => {\n        const { dispatch, listID } = this.props;\n        const { text } = this.state;\n\n        if (text) {\n            this.setState({\n                text:\"\"\n            });\n            dispatch(addCard(listID, text))\n        }\n\n        return;\n    };\n\n    renderAddButton = () => {\n        const { list } = this.props;\n\n        const buttonText = list ? \"Add new list\" : \"Add new card\";\n        const buttonTextOpacity = list ? 1 : 0.5;\n        const buttonTextColor = list ? \"white\" : \"inherit\";\n        const buttonTextBackground = list ? \"rgba(0,0,0,.25)\" : \"inherit\";\n\n        return (\n            <div \n            onClick={this.openForm}\n            style={{\n                ...styles.openFormButtonGroup,\n                opacity: buttonTextOpacity, color: buttonTextColor, backgroundColor: buttonTextBackground}}>\n                <Icon>add</Icon>\n                <p>{buttonText}</p>\n            </div>\n        )\n    };\n\n    renderForm = () => {\n        const { list } = this.props;\n\n        const placeholder = list ? \"Enter a list title...\" : \"Enter a message for this card...\";\n\n        const buttonTitle = list ? \"Add List\" : \"Add Card\";\n\n        return (\n            <div>\n                <Card \n                    style= { {\n                        overflow:\"visible\",\n                        minHeight: 80,\n                        minWidth: 272,\n                        padding: \"6px 8px 2px\"\n                    }}\n                >\n                    <TextareaAutosize \n                        placeholder={placeholder}  \n                        autoFocus\n                        onBlur={this.closeForm}\n                        value={this.state.text}\n                        onChange={this.handleInputChange}\n                        style={ {\n                            resize: \"none\",\n                            width: \"100%\",\n                            overflow: \"hidden\",\n                            outline: \"none\",\n                            border: \"none\"\n                        }}\n                    />\n                </Card>\n                <div style={styles.formButtonGroup}>\n                    <Button \n                        onMouseDown={list ? this.handleAddList : this.handleAddCard }\n                        variant=\"contained\" \n                        style={{ color: \"white\", backgroundColor: \"#F9690E\" }}\n                    >\n                        {buttonTitle} {\" \"}\n                    </Button>\n                    <Icon style={{ marginLeft: 8, cursor: \"pointer\" }}>close</Icon>\n                </div>\n            </div>\n        );\n    };\n\n    render() {\n        return this.state.formOpen ? this.renderForm() : this.renderAddButton();\n    }\n}\nconst styles = {\n    openFormButtonGroup: {\n        display: \"flex\",\n        alignItems: \"center\",\n        cursor: \"pointer\",\n        borderRadius: 3,\n        height: 36,\n        width: 272,\n        paddingLeft: 10\n    },\n    formButtonGroup: {\n        marginTop: 8,\n        display: \"flex\",\n        alignItems: \"center\"\n    }\n};\n\nexport default connect () (ScrumActionButton);","import React from 'react';\nimport ScrumCard from \"./ScrumCard\";\nimport ScrumActionButton from \"./ScrumActionButton\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\n\nconst ListContainer = styled.div`\n    background-color: #eac194;\n    border-radius: 3px;\n    width: 300px;\n    padding: 10px 20px;\n    height: 100%;\n    margin-right: 8px;\n`;\nconst ScrumList = ({ title, cards, listID, index }) => {\n    return (\n        <Draggable draggableId={String(listID)} index={index}>\n            {provided => (\n                <ListContainer \n                    {...provided.draggableProps} \n                    ref={provided.innerRef}\n                    {...provided.dragHandleProps}\n                >\n                    <Droppable droppableId={String(listID)} type=\"card\">\n                        {provided=> (\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\n                                <h4>{title}</h4>\n                                {cards.map((card, index) => (\n                                    <ScrumCard \n                                        key={card.id} \n                                        index={index}\n                                        text={card.text} \n                                        id={card.id} \n                                    /> \n                                ))}\n                                {provided.placeholder}\n                                <ScrumActionButton listID={listID} />\n                            </div>\n                        )}\n                    </Droppable>\n                </ListContainer>\n            )}\n        </Draggable>\n    );\n};\n\nexport default ScrumList;","import React, { Component } from \"react\";\nimport ScrumList from './ScrumList';\nimport { connect } from \"react-redux\";\nimport ScrumActionButton from \"./ScrumActionButton\";\nimport { DragDropContext, Droppable, DroppAble } from \"react-beautiful-dnd\";\nimport { sort } from \"../actions\";\nimport styled from \"styled-components\";\n\nconst ListContainer = styled.div `\n  display: flex;\n  flex-direction: row;\n`;\n\nclass App extends Component {\n  onDragEnd = (result) => {\n    console.log(result)\n    // todo: reording logic\n    const { destination, source, draggableId, type } = result;\n      console.log(result)\n    if (!destination) {\n     return; \n    }\n\n    this.props.dispatch(\n      sort(\n        source.droppableId,\n        destination.droppableId,\n        source.index,\n        destination.index,\n        draggableId,\n        type\n      )\n    );\n  };\n\n  render() {\n    const { lists } = this.props;\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <div className=\"App\">\n          <h2>SCRUMBOARD</h2>\n          <Droppable droppableId=\"all-lists\" direction=\"horizontal\" type=\"list\">\n            {provided => (\n              <ListContainer \n                {...provided.droppableProps} \n                ref={provided.innerRef} \n              >\n                { lists.map((list, index) => (\n                  <ScrumList \n                    listID={list.id} \n                    key={list.id} \n                    title={list.title} \n                    cards={list.cards} \n                    index={index}\n                  />\n                ))}\n                {provided.placeholder}\n                <ScrumActionButton list />\n              </ListContainer>\n            )}\n          </Droppable>\n        </div>\n      </DragDropContext>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  lists: state.lists\n});\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport store from './store';\nimport App from './components/App';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}