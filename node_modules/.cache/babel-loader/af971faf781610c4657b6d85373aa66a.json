{"ast":null,"code":"import { CONSTANTS } from \"../actions\";\nlet listID = 2;\nlet cardID = 6;\nconst initialState = [{\n  title: \"BACKLOG\",\n  id: `list-${0}`,\n  cards: [{\n    id: `card-${0}`,\n    text: \"Create User Stories\"\n  }, {\n    id: `card-${1}`,\n    text: \"j'ai pas d'idées de texte, c'est super\"\n  }]\n}, {\n  title: \"PLANNING\",\n  id: `list-${1}`,\n  cards: [{\n    id: `card-${2}`,\n    text: \"TO-DO tasks\"\n  }, {\n    id: `card-${3}`,\n    text: \"j'ai toujours pas d'idées de tâches, c'est dingue\"\n  }, {\n    id: `card-${4}`,\n    text: \"ça devient difficile d'avoir des idées qui viennent de nulle part, mon cerveau bouille\"\n  }, {\n    id: `card-${5}`,\n    text: \"need to debug rn arghhh ... wouhou I did it \"\n  }]\n}];\n\nconst listsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CONSTANTS.ADD_LIST:\n      const newList = {\n        title: action.payload,\n        cards: [],\n        id: `list-${listID}`\n      };\n      listID += 1;\n      return [...state, newList];\n\n    case CONSTANTS.ADD_CARD:\n      {\n        const newCard = {\n          text: action.payload.text,\n          id: `card-${cardID}`\n        };\n        cardID += 1;\n        const newState = state.map(list => {\n          if (list.id === action.payload.listID) {\n            return { ...list,\n              cards: [...list.cards, newCard]\n            };\n          } else {\n            return list;\n          }\n        });\n        return newState;\n      }\n\n    case CONSTANTS.DRAG_HAPPENED:\n      const {\n        droppableIdStart,\n        droppableIdEnd,\n        droppableIndexStart,\n        droppableIndexEnd,\n        // draggableId\n        type\n      } = action.payload;\n      const newState = [...state]; //dragging lists around\n\n      if (type === \"list\") {\n        const list = newState.splice(droppableIndexStart, 1);\n        newState.splice(droppableIndexEnd, 0);\n      } //in the same list\n\n\n      if (droppableIdStart === droppableIdEnd) {\n        console.log(\"same list\");\n        const list = state.find(list => droppableIdStart === list.id);\n        const card = list.cards.splice(droppableIndexStart, 1);\n        list.cards.splice(droppableIndexEnd, 0, ...card);\n      } // other list\n\n\n      if (droppableIdStart !== droppableIdEnd) {\n        // find the list where drag happened\n        const listStart = state.find(list => droppableIdStart === list.id); //pull out the card from the list\n\n        const card = listStart.cards.splice(droppableIndexStart, 1); // find the list where drag ended\n\n        const listEnd = state.find(list => droppableIdEnd === list.id); //put the card in the new list \n\n        listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default listsReducer;","map":{"version":3,"sources":["/Users/soumaya/Documents/BECODE2020/scrumboard/scrumboard/src/reducers/listsReducer.js"],"names":["CONSTANTS","listID","cardID","initialState","title","id","cards","text","listsReducer","state","action","type","ADD_LIST","newList","payload","ADD_CARD","newCard","newState","map","list","DRAG_HAPPENED","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","splice","console","log","find","card","listStart","listEnd"],"mappings":"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","sourcesContent":["import { CONSTANTS } from \"../actions\";\n\nlet listID = 2;\nlet cardID = 6;\n\nconst initialState = [\n    {\n        title: \"BACKLOG\",\n        id: `list-${0}`,\n        cards: [\n            {\n                id: `card-${0}`,\n                text: \"Create User Stories\"\n            },\n            {\n                id: `card-${1}`,\n                text: \"j'ai pas d'idées de texte, c'est super\"\n            }\n        ]\n    },\n    {\n        title: \"PLANNING\",\n        id: `list-${1}`,\n        cards: [\n            {\n                id:`card-${2}`,\n                text: \"TO-DO tasks\"\n            },\n            {\n                id: `card-${3}`,\n                text: \"j'ai toujours pas d'idées de tâches, c'est dingue\"\n            },\n            {\n                id: `card-${4}`,\n                text: \"ça devient difficile d'avoir des idées qui viennent de nulle part, mon cerveau bouille\"\n            },\n            {\n                id: `card-${5}`,\n                text: \"need to debug rn arghhh ... wouhou I did it \"\n            }\n        ]\n    }\n\n];\n\nconst listsReducer = (state = initialState, action) => {\n    switch (action.type) {\n\n        case CONSTANTS.ADD_LIST:\n            const newList = {\n                title: action.payload,\n                cards: [],\n                id: `list-${listID}`\n            };\n            listID += 1;\n            return [...state, newList];\n        \n        case CONSTANTS.ADD_CARD: {\n            const newCard = {\n                text: action.payload.text,\n                id: `card-${cardID}`\n            };\n            cardID += 1;\n\n            const newState = state.map(list => {\n                if (list.id === action.payload.listID) {\n                    return {\n                        ...list,\n                        cards: [...list.cards, newCard]\n                    }\n                } else {\n                    return list;\n                }\n            });\n\n            return newState;\n        }\n\n        case CONSTANTS.DRAG_HAPPENED:\n\n            const {\n                droppableIdStart,\n                droppableIdEnd,\n                droppableIndexStart,\n                droppableIndexEnd,\n                // draggableId\n                type\n            } = action.payload;\n            const newState = [...state];\n\n            //dragging lists around\n            if(type === \"list\") {\n                const list = newState.splice(droppableIndexStart, 1);\n                newState.splice(droppableIndexEnd,0,)\n            }\n\n            //in the same list\n            if(droppableIdStart === droppableIdEnd) {\n                console.log(\"same list\")\n                const list = state.find(list => droppableIdStart === list.id);\n                const card = list.cards.splice(droppableIndexStart, 1);\n                list.cards.splice(droppableIndexEnd, 0, ...card);\n            }\n            \n            // other list\n\n            if(droppableIdStart !== droppableIdEnd) {\n                // find the list where drag happened\n                const listStart = state.find(list => droppableIdStart === list.id)\n\n                //pull out the card from the list\n                const card = listStart.cards.splice(droppableIndexStart, 1);\n\n                // find the list where drag ended\n                const listEnd = state.find(list => droppableIdEnd === list.id);\n\n                //put the card in the new list \n                listEnd.cards.splice(droppableIndexEnd, 0, ...card)\n            }\n\n            return newState;\n\n        default: \n            return state;\n    }\n};\n\nexport default listsReducer;"]},"metadata":{},"sourceType":"module"}