{"ast":null,"code":"var _jsxFileName = \"/Users/soumaya/Documents/BECODE2020/scrumboard/scrumboard/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport ScrumList from './ScrumList';\nimport { connect } from \"react-redux\";\nimport ScrumActionButton from \"./ScrumActionButton\";\nimport { DragDropContext, Droppable, DroppAble } from \"react-beautiful-dnd\";\nimport { sort } from \"../actions\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n_c = ListContainer;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onDragEnd = result => {\n      console.log(result); // todo: reording logic\n\n      const {\n        destination,\n        source,\n        draggableId,\n        type\n      } = result;\n      console.log(result);\n\n      if (!destination) {\n        return;\n      }\n\n      this.props.dispatch(sort(source.droppableId, destination.droppableId, source.index, destination.index, draggableId, type));\n    };\n  }\n\n  render() {\n    const {\n      lists\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"SCRUMBOARD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"all-lists\",\n          direction: \"horizontal\",\n          type: \"list\",\n          children: provided => /*#__PURE__*/_jsxDEV(ListContainer, { ...provided.droppableProps,\n            ref: provided.innerRef,\n            children: [lists.map((list, index) => /*#__PURE__*/_jsxDEV(ScrumList, {\n              listID: list.id,\n              title: list.title,\n              cards: list.cards,\n              index: index\n            }, list.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 19\n            }, this)), provided.placeholder, /*#__PURE__*/_jsxDEV(ScrumActionButton, {\n              list: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  lists: state.lists\n});\n\nexport default connect(mapStateToProps)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"ListContainer\");","map":{"version":3,"sources":["/Users/soumaya/Documents/BECODE2020/scrumboard/scrumboard/src/components/App.js"],"names":["React","Component","ScrumList","connect","ScrumActionButton","DragDropContext","Droppable","DroppAble","sort","styled","ListContainer","div","App","onDragEnd","result","console","log","destination","source","draggableId","type","props","dispatch","droppableId","index","render","lists","provided","droppableProps","innerRef","map","list","id","title","cards","placeholder","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,eAAT,EAA0BC,SAA1B,EAAqCC,SAArC,QAAsD,qBAAtD;AACA,SAASC,IAAT,QAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAEA,MAAMC,aAAa,GAAGD,MAAM,CAACE,GAAK;AAClC;AACA;AACA,CAHA;KAAMD,a;;AAKN,MAAME,GAAN,SAAkBX,SAAlB,CAA4B;AAAA;AAAA;;AAAA,SAC1BY,SAD0B,GACbC,MAAD,IAAY;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EADsB,CAEtB;;AACA,YAAM;AAAEG,QAAAA,WAAF;AAAeC,QAAAA,MAAf;AAAuBC,QAAAA,WAAvB;AAAoCC,QAAAA;AAApC,UAA6CN,MAAnD;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACF,UAAI,CAACG,WAAL,EAAkB;AACjB;AACA;;AAED,WAAKI,KAAL,CAAWC,QAAX,CACEd,IAAI,CACFU,MAAM,CAACK,WADL,EAEFN,WAAW,CAACM,WAFV,EAGFL,MAAM,CAACM,KAHL,EAIFP,WAAW,CAACO,KAJV,EAKFL,WALE,EAMFC,IANE,CADN;AAUD,KApByB;AAAA;;AAsB1BK,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKL,KAAvB;AACA,wBACE,QAAC,eAAD;AAAiB,MAAA,SAAS,EAAE,KAAKR,SAAjC;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,SAAD;AAAW,UAAA,WAAW,EAAC,WAAvB;AAAmC,UAAA,SAAS,EAAC,YAA7C;AAA0D,UAAA,IAAI,EAAC,MAA/D;AAAA,oBACGc,QAAQ,iBACP,QAAC,aAAD,OACMA,QAAQ,CAACC,cADf;AAEE,YAAA,GAAG,EAAED,QAAQ,CAACE,QAFhB;AAAA,uBAIIH,KAAK,CAACI,GAAN,CAAU,CAACC,IAAD,EAAOP,KAAP,kBACV,QAAC,SAAD;AACE,cAAA,MAAM,EAAEO,IAAI,CAACC,EADf;AAGE,cAAA,KAAK,EAAED,IAAI,CAACE,KAHd;AAIE,cAAA,KAAK,EAAEF,IAAI,CAACG,KAJd;AAKE,cAAA,KAAK,EAAEV;AALT,eAEOO,IAAI,CAACC,EAFZ;AAAA;AAAA;AAAA;AAAA,oBADA,CAJJ,EAaGL,QAAQ,CAACQ,WAbZ,eAcE,QAAC,iBAAD;AAAmB,cAAA,IAAI;AAAvB;AAAA;AAAA;AAAA;AAAA,oBAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AA2BD;;AAnDyB;;AAsD5B,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAChCX,EAAAA,KAAK,EAAEW,KAAK,CAACX;AADmB,CAAL,CAA7B;;AAIA,eAAevB,OAAO,CAACiC,eAAD,CAAP,CAAyBxB,GAAzB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport ScrumList from './ScrumList';\nimport { connect } from \"react-redux\";\nimport ScrumActionButton from \"./ScrumActionButton\";\nimport { DragDropContext, Droppable, DroppAble } from \"react-beautiful-dnd\";\nimport { sort } from \"../actions\";\nimport styled from \"styled-components\";\n\nconst ListContainer = styled.div `\n  display: flex;\n  flex-direction: row;\n`;\n\nclass App extends Component {\n  onDragEnd = (result) => {\n    console.log(result)\n    // todo: reording logic\n    const { destination, source, draggableId, type } = result;\n      console.log(result)\n    if (!destination) {\n     return; \n    }\n\n    this.props.dispatch(\n      sort(\n        source.droppableId,\n        destination.droppableId,\n        source.index,\n        destination.index,\n        draggableId,\n        type\n      )\n    );\n  };\n\n  render() {\n    const { lists } = this.props;\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <div className=\"App\">\n          <h2>SCRUMBOARD</h2>\n          <Droppable droppableId=\"all-lists\" direction=\"horizontal\" type=\"list\">\n            {provided => (\n              <ListContainer \n                {...provided.droppableProps} \n                ref={provided.innerRef} \n              >\n                { lists.map((list, index) => (\n                  <ScrumList \n                    listID={list.id} \n                    key={list.id} \n                    title={list.title} \n                    cards={list.cards} \n                    index={index}\n                  />\n                ))}\n                {provided.placeholder}\n                <ScrumActionButton list />\n              </ListContainer>\n            )}\n          </Droppable>\n        </div>\n      </DragDropContext>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  lists: state.lists\n});\n\nexport default connect(mapStateToProps)(App);\n"]},"metadata":{},"sourceType":"module"}