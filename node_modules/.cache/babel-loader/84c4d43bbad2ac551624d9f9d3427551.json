{"ast":null,"code":"import { CONSTANTS } from \"../actions\";\nlet listID = 2;\nlet cardID = 4;\nconst initialState = [{\n  title: \"BACKLOG\",\n  id: `list-${o}`,\n  cards: [{\n    id: 0,\n    text: \"Create User Stories\"\n  }, {\n    id: 1,\n    text: \"j'ai pas d'idées de texte, c'est super\"\n  }]\n}, {\n  title: \"PLANNING\",\n  id: 1,\n  cards: [{\n    id: 0,\n    text: \"TO-DO tasks\"\n  }, {\n    id: 1,\n    text: \"j'ai toujours pas d'idées de tâches, c'est dingue\"\n  }, {\n    id: 2,\n    text: \"ça devient difficile d'avoir des idées qui viennent de nulle part, mon cerveau bouille\"\n  }, {\n    id: 3,\n    text: \"need to debug rn arghhh ... wouhou I did it \"\n  }]\n}];\n\nconst listsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CONSTANTS.ADD_LIST:\n      const newList = {\n        title: action.payload,\n        cards: [],\n        id: listID\n      };\n      listID += 1;\n      return [...state, newList];\n\n    case CONSTANTS.ADD_CARD:\n      const newCard = {\n        text: action.payload.text,\n        id: cardID\n      };\n      cardID += 1;\n      const newState = state.map(list => {\n        if (list.id === action.payload.listID) {\n          return { ...list,\n            cards: [...list.cards, newCard]\n          };\n        } else {\n          return list;\n        }\n      });\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default listsReducer;","map":{"version":3,"sources":["/Users/soumaya/Documents/BECODE2020/scrumboard/scrumboard/src/reducers/listsReducer.js"],"names":["CONSTANTS","listID","cardID","initialState","title","id","o","cards","text","listsReducer","state","action","type","ADD_LIST","newList","payload","ADD_CARD","newCard","newState","map","list"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AAEA,IAAIC,MAAM,GAAG,CAAb;AACA,IAAIC,MAAM,GAAG,CAAb;AAEA,MAAMC,YAAY,GAAG,CACjB;AACIC,EAAAA,KAAK,EAAE,SADX;AAEIC,EAAAA,EAAE,EAAG,QAAOC,CAAE,EAFlB;AAGIC,EAAAA,KAAK,EAAE,CACH;AACIF,IAAAA,EAAE,EAAC,CADP;AAEIG,IAAAA,IAAI,EAAE;AAFV,GADG,EAKH;AACIH,IAAAA,EAAE,EAAE,CADR;AAEIG,IAAAA,IAAI,EAAE;AAFV,GALG;AAHX,CADiB,EAejB;AACIJ,EAAAA,KAAK,EAAE,UADX;AAEIC,EAAAA,EAAE,EAAE,CAFR;AAGIE,EAAAA,KAAK,EAAE,CACH;AACIF,IAAAA,EAAE,EAAC,CADP;AAEIG,IAAAA,IAAI,EAAE;AAFV,GADG,EAKH;AACIH,IAAAA,EAAE,EAAE,CADR;AAEIG,IAAAA,IAAI,EAAE;AAFV,GALG,EASH;AACIH,IAAAA,EAAE,EAAE,CADR;AAEIG,IAAAA,IAAI,EAAE;AAFV,GATG,EAaH;AACIH,IAAAA,EAAE,EAAE,CADR;AAEIG,IAAAA,IAAI,EAAE;AAFV,GAbG;AAHX,CAfiB,CAArB;;AA0CA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AACnD,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKZ,SAAS,CAACa,QAAf;AACI,YAAMC,OAAO,GAAG;AACZV,QAAAA,KAAK,EAAEO,MAAM,CAACI,OADF;AAEZR,QAAAA,KAAK,EAAE,EAFK;AAGZF,QAAAA,EAAE,EAAEJ;AAHQ,OAAhB;AAKAA,MAAAA,MAAM,IAAI,CAAV;AACA,aAAO,CAAC,GAAGS,KAAJ,EAAWI,OAAX,CAAP;;AAEJ,SAAKd,SAAS,CAACgB,QAAf;AACI,YAAMC,OAAO,GAAG;AACZT,QAAAA,IAAI,EAAEG,MAAM,CAACI,OAAP,CAAeP,IADT;AAEZH,QAAAA,EAAE,EAAEH;AAFQ,OAAhB;AAIAA,MAAAA,MAAM,IAAI,CAAV;AAEJ,YAAMgB,QAAQ,GAAGR,KAAK,CAACS,GAAN,CAAUC,IAAI,IAAI;AAC/B,YAAGA,IAAI,CAACf,EAAL,KAAYM,MAAM,CAACI,OAAP,CAAed,MAA9B,EAAsC;AAClC,iBAAO,EACH,GAAGmB,IADA;AAEHb,YAAAA,KAAK,EAAE,CAAC,GAAGa,IAAI,CAACb,KAAT,EAAgBU,OAAhB;AAFJ,WAAP;AAIH,SALD,MAKO;AACH,iBAAOG,IAAP;AACH;AACJ,OATgB,CAAjB;AAWA,aAAOF,QAAP;;AAEA;AACI,aAAOR,KAAP;AAhCR;AAkCH,CAnCD;;AAqCA,eAAeD,YAAf","sourcesContent":["import { CONSTANTS } from \"../actions\";\n\nlet listID = 2;\nlet cardID = 4;\n\nconst initialState = [\n    {\n        title: \"BACKLOG\",\n        id: `list-${o}`,\n        cards: [\n            {\n                id:0,\n                text: \"Create User Stories\"\n            },\n            {\n                id: 1,\n                text: \"j'ai pas d'idées de texte, c'est super\"\n            }\n        ]\n    },\n    {\n        title: \"PLANNING\",\n        id: 1,\n        cards: [\n            {\n                id:0,\n                text: \"TO-DO tasks\"\n            },\n            {\n                id: 1,\n                text: \"j'ai toujours pas d'idées de tâches, c'est dingue\"\n            },\n            {\n                id: 2,\n                text: \"ça devient difficile d'avoir des idées qui viennent de nulle part, mon cerveau bouille\"\n            },\n            {\n                id: 3,\n                text: \"need to debug rn arghhh ... wouhou I did it \"\n            }\n        ]\n    }\n\n];\n\n\n\nconst listsReducer = (state = initialState, action) => {\n    switch (action.type) {\n\n        case CONSTANTS.ADD_LIST:\n            const newList = {\n                title: action.payload,\n                cards: [],\n                id: listID\n            };\n            listID += 1;\n            return [...state, newList];\n        \n        case CONSTANTS.ADD_CARD:\n            const newCard = {\n                text: action.payload.text,\n                id: cardID\n            }\n            cardID += 1;\n\n        const newState = state.map(list => {\n            if(list.id === action.payload.listID) {\n                return {\n                    ...list,\n                    cards: [...list.cards, newCard]\n                }\n            } else {\n                return list;\n            }\n        });\n\n        return newState;\n\n        default: \n            return state;\n    }\n};\n\nexport default listsReducer;"]},"metadata":{},"sourceType":"module"}