{"ast":null,"code":"import { CONSTANTS } from \"../actions\";\nlet listID = 2;\nlet cardID = 6; // const initialState = [\n//     {\n//         title: \"BACKLOG\",\n//         id: `list-${0}`,\n//         cards: [\n//             {\n//                 id: `card-${0}`,\n//                 text: \"Create User Stories\"\n//             },\n//             {\n//                 id: `card-${1}`,\n//                 text: \"j'ai pas d'idées de texte, c'est super\"\n//             }\n//         ]\n//     },\n//     {\n//         title: \"PLANNING\",\n//         id: `list-${1}`,\n//         cards: [\n//             {\n//                 id:`card-${2}`,\n//                 text: \"TO-DO tasks\"\n//             },\n//             {\n//                 id: `card-${3}`,\n//                 text: \"j'ai toujours pas d'idées de tâches, c'est dingue\"\n//             },\n//             {\n//                 id: `card-${4}`,\n//                 text: \"ça devient difficile d'avoir des idées qui viennent de nulle part, mon cerveau bouille\"\n//             },\n//             {\n//                 id: `card-${5}`,\n//                 text: \"need to debug rn arghhh ... wouhou I did it \"\n//             }\n//         ]\n//     }\n// ];\n\nconst listsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CONSTANTS.ADD_LIST:\n      const newList = {\n        title: action.payload,\n        cards: [],\n        id: `list-${listID}`\n      };\n      listID += 1;\n      return [...state, newList];\n\n    case CONSTANTS.ADD_CARD:\n      {\n        const newCard = {\n          text: action.payload.text,\n          id: `card-${cardID}`\n        };\n        cardID += 1;\n        const newState = state.map(list => {\n          if (list.id === action.payload.listID) {\n            return { ...list,\n              cards: [...list.cards, newCard]\n            };\n          } else {\n            return list;\n          }\n        });\n        return newState;\n      }\n\n    case CONSTANTS.DRAG_HAPPENED:\n      const {\n        droppableIdStart,\n        droppableIdEnd,\n        droppableIndexStart,\n        droppableIndexEnd,\n        draggableId\n      } = action.payload;\n      const newState = [...state]; //in the same list\n\n      if (droppableIdStart === droppableIdEnd) {\n        console.log(state);\n        const list = state.find(list => droppableIdStart === list.id);\n        const card = list.cards.splice(droppableIndexStart, 1);\n        list.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default listsReducer;","map":{"version":3,"sources":["/Users/soumaya/Documents/BECODE2020/scrumboard/scrumboard/src/reducers/listsReducer.js"],"names":["CONSTANTS","listID","cardID","listsReducer","state","initialState","action","type","ADD_LIST","newList","title","payload","cards","id","ADD_CARD","newCard","text","newState","map","list","DRAG_HAPPENED","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","console","log","find","card","splice"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AAEA,IAAIC,MAAM,GAAG,CAAb;AACA,IAAIC,MAAM,GAAG,CAAb,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGC,YAAT,EAAuBC,MAAvB,KAAkC;AACnD,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKP,SAAS,CAACQ,QAAf;AACI,YAAMC,OAAO,GAAG;AACZC,QAAAA,KAAK,EAAEJ,MAAM,CAACK,OADF;AAEZC,QAAAA,KAAK,EAAE,EAFK;AAGZC,QAAAA,EAAE,EAAG,QAAOZ,MAAO;AAHP,OAAhB;AAKAA,MAAAA,MAAM,IAAI,CAAV;AACA,aAAO,CAAC,GAAGG,KAAJ,EAAWK,OAAX,CAAP;;AAEJ,SAAKT,SAAS,CAACc,QAAf;AAAyB;AACrB,cAAMC,OAAO,GAAG;AACZC,UAAAA,IAAI,EAAEV,MAAM,CAACK,OAAP,CAAeK,IADT;AAEZH,UAAAA,EAAE,EAAG,QAAOX,MAAO;AAFP,SAAhB;AAIAA,QAAAA,MAAM,IAAI,CAAV;AAEA,cAAMe,QAAQ,GAAGb,KAAK,CAACc,GAAN,CAAUC,IAAI,IAAI;AAC/B,cAAIA,IAAI,CAACN,EAAL,KAAYP,MAAM,CAACK,OAAP,CAAeV,MAA/B,EAAuC;AACnC,mBAAO,EACH,GAAGkB,IADA;AAEHP,cAAAA,KAAK,EAAE,CAAC,GAAGO,IAAI,CAACP,KAAT,EAAgBG,OAAhB;AAFJ,aAAP;AAIH,WALD,MAKO;AACH,mBAAOI,IAAP;AACH;AACJ,SATgB,CAAjB;AAWA,eAAOF,QAAP;AACH;;AAED,SAAKjB,SAAS,CAACoB,aAAf;AAEA,YAAM;AACFC,QAAAA,gBADE;AAEFC,QAAAA,cAFE;AAGFC,QAAAA,mBAHE;AAIFC,QAAAA,iBAJE;AAKFC,QAAAA;AALE,UAMFnB,MAAM,CAACK,OANX;AAOI,YAAMM,QAAQ,GAAG,CAAC,GAAGb,KAAJ,CAAjB,CATJ,CAWI;;AACA,UAAGiB,gBAAgB,KAAKC,cAAxB,EAAwC;AACpCI,QAAAA,OAAO,CAACC,GAAR,CAAYvB,KAAZ;AACA,cAAMe,IAAI,GAAGf,KAAK,CAACwB,IAAN,CAAWT,IAAI,IAAIE,gBAAgB,KAAKF,IAAI,CAACN,EAA7C,CAAb;AACA,cAAMgB,IAAI,GAAGV,IAAI,CAACP,KAAL,CAAWkB,MAAX,CAAkBP,mBAAlB,EAAuC,CAAvC,CAAb;AACAJ,QAAAA,IAAI,CAACP,KAAL,CAAWkB,MAAX,CAAkBN,iBAAlB,EAAqC,CAArC,EAAwC,GAAGK,IAA3C;AACH;;AAED,aAAOZ,QAAP;;AAEJ;AACI,aAAOb,KAAP;AAtDR;AAwDH,CAzDD;;AA2DA,eAAeD,YAAf","sourcesContent":["import { CONSTANTS } from \"../actions\";\n\nlet listID = 2;\nlet cardID = 6;\n\n// const initialState = [\n//     {\n//         title: \"BACKLOG\",\n//         id: `list-${0}`,\n//         cards: [\n//             {\n//                 id: `card-${0}`,\n//                 text: \"Create User Stories\"\n//             },\n//             {\n//                 id: `card-${1}`,\n//                 text: \"j'ai pas d'idées de texte, c'est super\"\n//             }\n//         ]\n//     },\n//     {\n//         title: \"PLANNING\",\n//         id: `list-${1}`,\n//         cards: [\n//             {\n//                 id:`card-${2}`,\n//                 text: \"TO-DO tasks\"\n//             },\n//             {\n//                 id: `card-${3}`,\n//                 text: \"j'ai toujours pas d'idées de tâches, c'est dingue\"\n//             },\n//             {\n//                 id: `card-${4}`,\n//                 text: \"ça devient difficile d'avoir des idées qui viennent de nulle part, mon cerveau bouille\"\n//             },\n//             {\n//                 id: `card-${5}`,\n//                 text: \"need to debug rn arghhh ... wouhou I did it \"\n//             }\n//         ]\n//     }\n\n// ];\n\nconst listsReducer = (state = initialState, action) => {\n    switch (action.type) {\n\n        case CONSTANTS.ADD_LIST:\n            const newList = {\n                title: action.payload,\n                cards: [],\n                id: `list-${listID}`\n            };\n            listID += 1;\n            return [...state, newList];\n        \n        case CONSTANTS.ADD_CARD: {\n            const newCard = {\n                text: action.payload.text,\n                id: `card-${cardID}`\n            };\n            cardID += 1;\n\n            const newState = state.map(list => {\n                if (list.id === action.payload.listID) {\n                    return {\n                        ...list,\n                        cards: [...list.cards, newCard]\n                    }\n                } else {\n                    return list;\n                }\n            });\n\n            return newState;\n        }\n\n        case CONSTANTS.DRAG_HAPPENED:\n\n        const {\n            droppableIdStart,\n            droppableIdEnd,\n            droppableIndexStart,\n            droppableIndexEnd,\n            draggableId\n        } = action.payload;\n            const newState = [...state];\n\n            //in the same list\n            if(droppableIdStart === droppableIdEnd) {\n                console.log(state)\n                const list = state.find(list => droppableIdStart === list.id);\n                const card = list.cards.splice(droppableIndexStart, 1)\n                list.cards.splice(droppableIndexEnd, 0, ...card)\n            }\n\n            return newState;\n\n        default: \n            return state;\n    }\n};\n\nexport default listsReducer;"]},"metadata":{},"sourceType":"module"}